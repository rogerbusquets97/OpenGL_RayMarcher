#version 440
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .01

uniform ivec2 Resolution;

float GetDist(vec3 p) {
	vec4 s = vec4(0, 1, 6, 1);

	float sphereDist = length(p - s.xyz) - s.w;
	float planeDist = p.y;

	float d = min(sphereDist, planeDist);
	return d;
}

float RayMarch(vec3 ro, vec3 rd) {
	float dO = 0.;

	for (int i = 0; i < MAX_STEPS; i++) {
		vec3 p = ro + rd * dO;
		float dS = GetDist(p);
		dO += dS;
		if (dO > MAX_DIST || dS < SURF_DIST) break;
	}

	return dO;
}

vec3 GetNormal(vec3 p) {
	float d = GetDist(p);
	vec2 e = vec2(.01, 0);

	vec3 n = d - vec3(
		GetDist(p - e.xyy),
		GetDist(p - e.yxy),
		GetDist(p - e.yyx));

	return normalize(n);
}

float GetLight(vec3 p) {
	vec3 lightPos = vec3(0, 5, 6);
	vec3 l = normalize(lightPos - p);
	vec3 n = GetNormal(p);

	float dif = clamp(dot(n, l), 0., 1.);
	float d = RayMarch(p + n * SURF_DIST*2., l);
	if (d < length(lightPos - p)) dif *= .1;

	return dif;
}

void main()
{
	// base pixel colour for image
	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	float max_x = 5.0;
	float max_y = 5.0;
	ivec2 dims = imageSize(img_output);
	float x = (float(pixel_coords.x * 2 - dims.x) / dims.x);
	float y = (float(pixel_coords.y * 2 - dims.y) / dims.y);


	vec2 uv = vec2(x, y);

	vec3 col = vec3(0.0);
	vec3 ro = vec3(0, 1, 0);
	vec3 rd = normalize(vec3(uv.x, uv.y, 1));
	float d = RayMarch(ro, rd);
	vec3 p = ro + rd * d;
	float dif = GetLight(p);
	col = vec3(dif);

	pixel = vec4(col, 1);

	// output to a specific pixel in the image
	imageStore(img_output, pixel_coords, pixel);
}
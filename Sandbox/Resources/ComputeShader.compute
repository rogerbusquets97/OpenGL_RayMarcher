#version 440
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

#define MAX_STEPS 100
#define MAX_DIST 50.
#define SURF_DIST .01

uniform ivec2 Resolution;

float hash1(vec2 p)
{
	p = 50.0*fract(p*0.3183099);
	return fract(p.x*p.y*(p.x + p.y));
}

float hash1(float n)
{
	return fract(n*17.0*fract(n*0.3183099));

}
vec4 noised(in vec3 x)
{
	vec3 p = floor(x);
	vec3 w = fract(x);

	vec3 u = w * w*w*(w*(w*6.0 - 15.0) + 10.0);
	vec3 du = 30.0*w*w*(w*(w - 2.0) + 1.0);

	float n = p.x + 317.0*p.y + 157.0*p.z;

	float a = hash1(n + 0.0);
	float b = hash1(n + 1.0);
	float c = hash1(n + 317.0);
	float d = hash1(n + 318.0);
	float e = hash1(n + 157.0);
	float f = hash1(n + 158.0);
	float g = hash1(n + 474.0);
	float h = hash1(n + 475.0);

	float k0 = a;
	float k1 = b - a;
	float k2 = c - a;
	float k3 = e - a;
	float k4 = a - b - c + d;
	float k5 = a - c - e + g;
	float k6 = a - b - e + f;
	float k7 = -a + b + c - d + e - f - g + h;

	return vec4(-1.0 + 2.0*(k0 + k1 * u.x + k2 * u.y + k3 * u.z + k4 * u.x*u.y + k5 * u.y*u.z + k6 * u.z*u.x + k7 * u.x*u.y*u.z),
		2.0* du * vec3(k1 + k4 * u.y + k6 * u.z + k7 * u.y*u.z,
			k2 + k5 * u.z + k4 * u.x + k7 * u.z*u.x,
			k3 + k6 * u.x + k5 * u.y + k7 * u.x*u.y));
}

float fbm(in vec3 st) {
	// Initial values
	float value = 0.0;
	float amplitude = 0.5;
	//
	// Loop of octaves
	for (int i = 0; i < 6; i++) {
		vec4 d = noised(st);
		value += amplitude * d.x;
		st *= 2.;
		amplitude *= .42;
	}

	return value;
}

float GetDist(vec3 p)
{
	float d = fbm(p * 0.356);

	return p.y + (d);
}

float RayMarch(vec3 ro, vec3 rd) {
	float dO = 0.;

	for (int i = 0; i < MAX_STEPS; i++) {
		vec3 p = ro + rd * dO;
		float dS = GetDist(p);
		dO += dS;
		if (dO > MAX_DIST || dS < SURF_DIST) break;
	}

	return dO;
}

vec3 GetNormal(vec3 p) {
	float d = GetDist(p);
	vec2 e = vec2(.01, 0);

	vec3 n = d - vec3(
		GetDist(p - e.xyy),
		GetDist(p - e.yxy),
		GetDist(p - e.yyx));

	return normalize(n);
}

float GetLight(vec3 p) {
	vec3 lightPos = vec3(0, 5, 6);
	vec3 l = normalize(lightPos - p);
	vec3 n = GetNormal(p);

	float dif = clamp(dot(n, l), 0., 1.);
	float d = RayMarch(p + n * SURF_DIST*2., l);
	if (d < length(lightPos - p)) dif *= .1;

	return dif;
}

void main()
{
	// base pixel colour for image
	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 dims = imageSize(img_output);
	float x = (float(pixel_coords.x * 2 - dims.x) / dims.x);
	float y = (float(pixel_coords.y * 2 - dims.y) / dims.y);

	vec2 uv = vec2(x, y);

	vec3 col = vec3(0.0);
	vec3 ro = vec3(0, 1, 0);
	vec3 rd = normalize(vec3(uv.x, uv.y, 1));
	float d = RayMarch(ro, rd);

	if (d < MAX_DIST)
	{
		vec3 p = ro + rd * d;
		float dif = GetLight(p);
		col = vec3(dif);
	}
	else
	{
		vec3 blue = vec3(0.1, 0.2, 0.4);
		vec3 white = vec3(0.8, 0.8, 0.9);
		col = mix(white, blue, pixel_coords.y / dims.y);
	}

	pixel = vec4(col, 1);

	// output to a specific pixel in the image
	imageStore(img_output, pixel_coords, pixel);
}